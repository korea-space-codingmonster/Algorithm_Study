#base

# n = 1260
# count = 0

# array = [500, 100, 50, 10]

# for coin in array:
#   count +=n // coin
#   n %= coin

# print(count)



#-----------------------------------------------------------
#큰수의 법칙
# n, m, k = map(int, input().split())

# data = list(map(int, input().split()))
# data.sort()

# first = data[n - 1]
# second = data[n - 2]
# result = 0

# while True:
#   for i in range(k):
#     if m == 0:
#       break
#     result += first
#     m -= 1
#   if m == 0:
#     break
#   result += second
#   m -= 1
# print(result)


#수학적으로 생각했을 경우
# n, m, k = map(int, input().split())

# data = list(map(int, input().split()))
# data.sort()

# first = data[n - 1]
# second = data[n - 2]

# count = int(m / (k + 1)) * k
# count += m % (k + 1)

# result = 0
# result += (count) * first
# result += (m - count) * second

# print(result)


#-----------------------------------------------------------
#숫자 카드 게임
# n, m = map(int, input().split())

# result = 0

# for i in range(n):
#   data = map(int, input().split())
#   min_value = min(data)
  
#   result = max(result, min_value)
# print(result)

#숫자 카드 게임
#이중 반복문
# n, m = map(int, input().split())

# result = 0 

# for i in range(n):
#   data = map(int, input().split())

#   min = 10001
#   for j in data:
#     min_value = min(data)
#   result = max(result, min_value)

# print(result)


#-----------------------------------------------------------
#
#1이 될 때까지
# n, k = map(int, input().split())
# result = 0

# while n >= k:

#   while n % k != 0:
#     n -= 1
#     result += 1
  
#   n //= k
#   result += 1

# while n > 1:
#   n -= 1
#   result += 1

# print(result)


#-----------------------------------------------------------

# 문제
# 상근이는 요즘 설탕공장에서 설탕을 배달하고 있다. 상근이는 지금 사탕가게에 설탕을 정확하게 N킬로그램을 배달해야 한다. 설탕공장에서 만드는 설탕은 봉지에 담겨져 있다. 봉지는 3킬로그램 봉지와 5킬로그램 봉지가 있다.

# 상근이는 귀찮기 때문에, 최대한 적은 봉지를 들고 가려고 한다. 예를 들어, 18킬로그램 설탕을 배달해야 할 때, 3킬로그램 봉지 6개를 가져가도 되지만, 5킬로그램 3개와 3킬로그램 1개를 배달하면, 더 적은 개수의 봉지를 배달할 수 있다.

# 상근이가 설탕을 정확하게 N킬로그램 배달해야 할 때, 봉지 몇 개를 가져가면 되는지 그 수를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N이 주어진다. (3 ≤ N ≤ 5000)

# 출력
# 상근이가 배달하는 봉지의 최소 개수를 출력한다. 만약, 정확하게 N킬로그램을 만들 수 없다면 -1을 출력한다.


# N = int(input())
# count = 0

# while N >=0:
#   if N % 5 == 0:
#     count += N // 5
#     print(count)
#     break
#   N -= 3
#   count += 1
# else:
#   print("-1")



  #-----------------------------------------------------------
#   문제
# 인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다.

# 사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자. [1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 3분만에 돈을 뽑을 수 있다. 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = 4분이 걸리게 된다. 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 총 3+1+4 = 8분이 필요하게 된다. 4번 사람은 3+1+4+3 = 11분, 5번 사람은 3+1+4+3+2 = 13분이 걸리게 된다. 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = 39분이 된다.

# 줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면, 2번 사람은 1분만에, 5번 사람은 1+2 = 3분, 1번 사람은 1+2+3 = 6분, 4번 사람은 1+2+3+3 = 9분, 3번 사람은 1+2+3+3+4 = 13분이 걸리게 된다. 각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = 32분이다. 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다.

# 줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오.


# 입력
# 첫째 줄에 사람의 수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어진다. (1 ≤ Pi ≤ 1,000)

# 출력
# 첫째 줄에 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 출력한다.

# 예제 입력 1  복사
# 5
# 3 1 4 3 2
# 예제 출력 1  복사
# 32


# n = int(input())
# array = list(map(int, input().split()))
# count = 0
# array.sort()

# for i in range(n):
#   for j in range(i + 1):
#     count += array[j]

# print(count)



#-----------------------------------------------------------
# 문제
# 준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.

# 동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)

# 둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)

# 출력
# 첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.

# 예제 입력 1  복사
# 10 4200
# 1
# 5
# 10
# 50
# 100
# 500
# 1000
# 5000
# 10000
# 50000
# 예제 출력 1  복사
# 6
# 예제 입력 2  복사
# 10 4790
# 1
# 5
# 10
# 50
# 100
# 500
# 1000
# 5000
# 10000
# 50000
# 예제 출력 2  복사
# 12

