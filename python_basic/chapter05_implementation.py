#상하좌우 문제
#시뮬레이션 문제

#시뮬레이션 유형, 구현유형, 완전 탐색 유형

#N 입력 받기
#  n = int(input())
#  x , y = 1, 1
#  plans = input().split()

# # L, R, U, D에 따른 이동 방향
# dx = [0, 0, -1, 1]
# dy = [-1, 1, 0, 0]
# move_types = ['L', 'R', 'U', 'D']

# #이동 계획을 하나씩 확인하기
# for plan in plans:
#   #이동 후 좌표 구하기
#   for i in range(len(move_types)):
#     nx = x + dx[i]
#     ny = y + dy[i]
#   #공간을 벗어난 경우 무시
#   if nx < 1 or ny < 1 or nx > n or ny > n:
#     continue
#   #이동 수행
#   x, y = nx, ny
# print(x, y)

#----------------------------------------------------

#시각 : 문제
#정수 n이 입력되면 00시 00분 00초부터 n시 59분 59초까지의 모든 시각 중에서 3이 하나라도 포하되는 모든 경우의 수를 구하는 프로그램을 작성하세요. 예를 들어 1을 입력 했을때 다음은 3이 하나라도 포함되어 있으므로 세어야 하는 시각입니다.
#00시 00분 03초
#00시 13분 30초

#반면에 다음은 3이 하나도 포함되어 있지 않으므로 세면 안되는 시각 입니다.
#00시 02분 55초
#01시 27분 45초

#입력조건 첫째 줄에 정수 N이 입력(0 <= n <= 23)
#완전 탐색
# n = int(input())
# count = 0

# for i in range(n + 1):
#   for j in range(60):
#     for k in range(60):
#       if '3' in str(i) + str(j) + str(k):
#         count += 1
# print(count)



#----------------------------------------------------
#행복 왕국의 왕실 정원은 체스판과 같은 8x8 좌표 평면 입니다. 왕실 정원의 특정한 한 칸에 나이트가 서 있습니다. 나이트는 매우 충성스러운 신하로서 매일 무술을 연마합니다.

#나이트는 말을 타고 있기 때문에 이동을 할 떄는 L자 형태로만 이동할 수 있으며 정원 밖으로는 나갈 수 없습니다.

#나이트는 특정 위치에서 다음과 같은 2가지 경우로 이동할 수 있습니다.
#1. 수평으로 두 칸 이동항 뒤에 수직으로 한칸 이동하기
#2. 수직으로 두 칸 이동한 뒤에 수평으로 한칸 이동하기

#8x8 좌표평면에서 나이트의 위치가 주어졌을 때 나이트가 이동할 수 있는 경우의 수를 출력하는 프로그램을 작성하세요. 왕실의 정원에서 행 위치를 표현 할떄는 1부터 8로 표현하며, 열 위치를 표현할 때는 a부터 h로 표현합니다.

#a1에 있을 때 이동할 수 있는 경우의 수는 2가지 입니다.

# input_position = input()
# row = int(input_position[1])
# col = int(ord(input_position[0])) - int(ord('a')) + 1

# steps = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]

# reuslt = 0
# for step in steps:
#   next_row = row + step[0]
#   next_col = col + step[1]

# if next_col >= 1 and next_col <= 8 and next_row >= 1 and next_row <= 8:
#   result += 1

# print(result)



#----------------------------------------------------

#문자열 재정렬 : 문제 설명
#알파벳 대문자와 숫자(0 ~ 9)로만 구성된 문자열이 입력으로 주어집니다. 이때 모든 알파벳을 오름차순으로 정렬하여 이어서 출력한 뒤에, 그 뒤에 모든 숫자를 더한 값을 이어서 출력합니다.
#예를 들어 K1KA5CB7이라는 값이 들어오면 ABCKK13을 출력합니다.

string = input()
alpha = []
value = 0

for i in string :
  if i.isalpha():
    alpha.append(i)
  else:
    value += int(i)

alpha.sort()

if value != 0:
  alpha.append(str(value))

print(''.join(alpha))#문자열로 출력하기 위함